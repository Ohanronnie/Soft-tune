let express = require('express');
let app = express();
let bodyparser = require('body-parser');
let parser = bodyparser.urlencoded({extended: false});
let cookieparser = require('cookie-parser');
let multer = require("multer");
let authenticate = require('./authenticate.js');
app.use(cookieparser());
app.use('/public',express.static('public'));
app.use(bodyparser.urlencoded({extended: false}));
app.set('view engine','ejs');
app.use('/music',express.static('my-uploads'));
app.use('/cover',express.static('profile-pics'));
app.use('/images',express.static('my-uploads'));
let formidable = require('formidable');
let url = "mongodb+srv://ohanronnieserver:2RNqRolJvJeaREiq@cluster0.3t6f6ty.mongodb.net/?retryWrites=true&w=majority";
//let url = "mongodb://localhost:27017"
let mongo = require('mongodb').MongoClient;
let decrypt = text => {
   return atob(atob(atob(text)))
}
let fs = require('fs');
//show the file
let location = '';
let staticUser = (req,res) => {
  if(req.cookies.Login_data == undefined || req.cookies.Login_data == "undefined"){
    res.render('project/home/index',{
    message: 'You must login to continue'
 });
 }
 else{
   let mail = decrypt(req.cookies.Login_data.user);
   let pass = decrypt(req.cookies.Login_data.pass);
   mongo.connect(url,function(err,db){
     if(err) throw err;
     let dbo = db.db('mydb');
     let query = {mail: mail, password: pass}
     console.log(query)
     dbo.collection('userdata').find(query).toArray(function(err,result){
       console.log(result[0].username)
       return result[0].username;
    db.close();
  });
  });
 }
}
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, 'my-uploads/')
  },
  filename: function (req, file, cb) {
    const ext = file.mimetype.split('/')[1];
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9)
    let y = 'OH' + '-' + file.fieldname.toUpperCase() + '-' + uniqueSuffix + '.' + ext;
   //y.push({location: uniqueSuffix});
   // console.log(y);
    location = y;
    cb(null, 'OH' + '-' + file.fieldname.toUpperCase() + '-' + uniqueSuffix + '.' + ext);
//    let buf = fs.readFileSync(`my-uploads/${file.fieldname}-${y}.${ext}`);
  }
})

const upload = multer({ storage: storage })
app.get('/upload.html',function(req,res){
  res.render('project/home/upload',{
  message: '/music/music-1667320517465-27894618.mpeg'
  });
}); 
//control the form
app.post('/upload',upload.fields([{name: 'music',maxCount: 1},{name: 'cover', maxCount: 1}]),function(req,res){
   let static = "";
   let name = req.body.name;
   let lyrics = req.body.lyrics;
   let artist = req.body.artist;
   let description = req.body.description;
   let [cover,title,album,singer] = req.body.metadata.split('[');
   try{
     title = title.split("|")[0];
   }
   catch(err){
     title = title
   }
   /* let array = [name,lyrics,artist,description,title,singer,album];
   console.log(array,location);
   */ if(title == null || title == "" || title == " "){
     title = name
   }
   else{
     title = title
   }
   if(album == null || album == "" || album == " "){
     artist = artist
   }
   else{
     artist = album
   }
   if(singer == null || singer == "" || singer == " "){
     singer = ''
   }
   else{
     singer = singer
   }
 if(req.cookies.Login_data == undefined || req.cookies.Login_data == "undefined"){
    res.render('project/home/index',{
    message: 'You must login to continue'
 });
 }
 else{
   let mail = decrypt(req.cookies.Login_data.user);
   let pass = decrypt(req.cookies.Login_data.pass);
   mongo.connect(url,function(err,db){
     if(err) throw err;
     let dbo = db.db('mydb');
     let query = {mail: mail, password: pass}
     console.log(query)
     dbo.collection('userdata').find(query).toArray(function(err,result){
       console.log(result)
       static += result[0].username
       db.close();
  });
  });
   static = mail;
 }
   let img = Date.now()
   let data = {user: static,
    location: location,
    artist: artist,
    title: title,
    album: singer,
    description: description,
    lyrics: lyrics,
    cover: img
   }
   console.log(data)
   fs.writeFile(`my-uploads/${img}`, cover, function(err){
     if(err) throw err;
   });
   mongo.connect(url,function(err,db){
      if(err) throw err;
      let dbo = db.db('mydb');
      dbo.collection('musicList').insertOne(data,function(err,result){
        if(err) throw err;
        console.log('Done',result);
      });
    });
   /*console.log([title,artist])*/
   /*   async function connect(){
     try{
     let result = db.pool.query('INSERT INTO music(music,cover,name,artist,lyrics,description) VALUES ?',[music,cover,name,artist,lyrics,description])
     console.log(result)
    }
    catch(err){
    console.log(err)
    }
  }
  connect()*/
res.redirect('/home');

 });
app.get('/login',function(req,res){
  res.render('project/home/index',{
  message: ''
}) 
});
app.post('/index',function(req,res){
  let form = new formidable.IncomingForm();
  form.parse(req,function(err,fields,files){
   let email = fields.mail;
   let password = fields.password;
     mongo.connect(url,function(err,db){
        if(err) throw err;
        let dbo = db.db('mydb');
        let query = {mail: email, password: password} 
        dbo.collection('userdata').find(query).toArray(function(err,result){
        if(err) throw err;
        console.log(result);
        if(result.length == 0){
        res.render('project/home/index',{
          message: 'Incorrect Password' 
       });
       db.close()
      }
      else{
        let data = {
        user: btoa(btoa(btoa(email))),
        pass: btoa(btoa(btoa(password)))
        };
        let info = {
        maxAge: 1000 * 1000 * 24 * 1000
        }
        try{
        res.cookie('Login_data',data,info);
        }
        catch(err){
         throw err; 
        }/*,{
        maxAge: 1000 * 60 * 60 * 24 * 3,
        // expires works the same as the maxAge
        secure: true,
        httpOnly: true,
        sameSite: 'lax'
        });*/
        let logindata = btoa('Login-data');
        console.log(req.cookies,logindata);
        console.log(req.cookies.Login_data)
        db.close(); 
        res.redirect('/home');
  };
   });
 });
  });
});
app.get('/home',function(req,res){
  if(req.cookies.Login_data == undefined || req.cookies.Login_data == "undefined"){
    res.render('project/home/index',{
    message: 'You must login to continue'
 });
 }
 else{
   let mail = decrypt(req.cookies.Login_data.user);
   let pass = decrypt(req.cookies.Login_data.pass);
   mongo.connect(url,function(err,db){
     if(err) throw err;
     let dbo = db.db('mydb');
     let query = {mail: mail, password: pass}
     console.log(query)
     dbo.collection('userdata').find(query).toArray(function(err,result){
       console.log(result)
       res.render('project/files/index',{
       user: result[0].username
    });
    db.close();
  });
  });
 }
});
app.get('/signup',function(req,res){
  res.render('project/home/signup',{
  message: ''
});
});
app.post('/signin',function(req,res){
  let form = new formidable.IncomingForm();
  form.parse(req,function(err,fields,files){
    let username = fields.name;
    let password = fields.pass;
    let mail = fields.mail;
   mongo.connect(url,function(err,db){
    let dbo = db.db('mydb');
    dbo.collection('userdata').find({username: username}).toArray(function(err,result){
      console.log(result)
   });
   let data = {
     username: username,
     password: password,
     mail: mail,
     userdata: {
      subscribing: 0,
      subscriber: 0,
      description: '',
      musicAdded: 0,
      coverPath: '/cover/image.jpg',
      name: username,
      verified: false,
      golden: false
    }
   }
   dbo.collection('userdata').insertOne(data,function(err,result){
     if(err) throw err;
     console.log(data);
     console.log('ADDED TO DATABASE');
     res.render('project/home/index',{
     message: ''
     })
     db.close()
  });
 });
 });
});
app.get('/check',function(req,res){
    if(req.query.data == undefined){
       data = ''
    }
    else{
       data = req.query.data
    }
    mongo.connect(url,function(err,db){
      if(err) throw err;
      console.log('Step 1');
      let dbo = db.db('mydb');
      dbo.collection('userdata').find({username: data}).toArray(function(err,result){
      if(err) throw err;
      if(data.length < 4){
      res.send(' ');
      db.close()
    }
    else{
      res.send(result);
      console.log(result)
      db.close()
    };
  });
});
});
app.get('/mail',function(req,res){
    if(req.query.mail == undefined){
       dat = ''
    }
    else{
       dat = req.query.mail
    }
      mongo.connect(url,function(err,db){
      if(err) throw err;
      console.log('Step 1');
      let dbo = db.db('mydb');
      dbo.collection('userdata').find({mail: dat}).toArray(function(err,result){
      if(err) throw err;
    if(dat.indexOf('@') == -1 || dat.indexOf('.') == -1){ 
     res.send(' ');
     db.close()
    }
    else{
     res.send(result);
     console.log(result)
     db.close()
    }
  });
});
});
app.get('/musicList',function(req,res){
   mongo.connect(url,function(err,db){
      if(err) throw err;
      console.log('Step 1');
      let dbo = db.db('mydb');
      dbo.collection('musicList').find({}).limit(-3).toArray(function(err,result){
      if(err) throw err;
      res.json(result)
  });
 });
});
app.get('/profile',function(req,res){
  let fs = require('fs');
//show the file
let location = '';
let staticUser = () => {
  if(req.cookies.Login_data == undefined || req.cookies.Login_data == "undefined"){
    res.render('project/home/index',{
    message: 'You must login to continue'
 });
 }
 else{
   let mail = decrypt(req.cookies.Login_data.user);
   let pass = decrypt(req.cookies.Login_data.pass);
   mongo.connect(url,function(err,db){
     if(err) throw err;
     let dbo = db.db('mydb');
     let query = {mail: mail, password: pass}
     console.log(query)
     dbo.collection('userdata').find(query).toArray(function(err,result){
       console.log(result[0].username)
       return result[0].username;
    db.close();
  });
  });
  res.render('project/files/profile',{
  user: 'xyz'
 });
 }
}
staticUser()
})
app.get('/profileDetails',function(req,res){
   let mail = decrypt(req.cookies.Login_data.user);
   let pass = decrypt(req.cookies.Login_data.pass);
   mongo.connect(url,function(err,db){
     if(err) throw err;
     let dbo = db.db('mydb');
     let query = {mail: mail, password: pass}
     console.log(query)
     dbo.collection('userdata').find(query).toArray(function(err,result){
       console.log(result);
       res.json(result);
    db.close();
  });
  });
});
app.get('/update',function(req,res){
  res.render('project/files/update')
  authenticate.authenticate();
  staticUser();
})
app.post('/updateprofile',function(req,res){
   let form = new formidable.IncomingForm();
   form.parse(req,function(err,fields,files){
     let [name,bio,pass] = [fields.name,fields.bio,fields.password];
     console.log(name,bio,pass)
       mongo.connect(url,function(err,db){
     if(err) throw err;
     letb dbo = db.db('mydb');
     let query = {mail: mail, password: pass}
     console.log(query)
     dbbo.collection('userdata').find(query).toArray(function(err,result){
       console.log(result);
       res.json(result);
       db.close();
       });
     });
   })
});
app.listen(8080,() => {	
console.log('Server is active at port 8080');
})
